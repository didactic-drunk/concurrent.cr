{"repository_name":"concurrent","body":"# concurrent.cr\n[![Build Status](https://travis-ci.org/didactic-drunk/concurrent.cr.svg?branch=master)](https://travis-ci.org/didactic-drunk/concurrent.cr)\n[![Docs](https://img.shields.io/badge/docs-available-brightgreen.svg)](https://didactic-drunk.github.io/concurrent.cr/)\n\n<strike>Modern</strike> <strike>Adequate</strike> <strike>Any</strike> \n**New opportunities for** concurrency tools in Crystal.  \nLarge <strike>empty lots</strike> spacious directories available to build your dream <strike>home</strike> algorithm!  \nSpace is filling up at (24k code bytes / 2 months) 0.004 bytes per second.  Register your PR today!  \n<strike>©️ Real estate marketing association</strike>\n\nInspired by Erlang, Clojure, Scala, Haskell, F#, C#, Java, and classic concurrency patterns which inspired \n[Ruby](https://github.com/ruby-concurrency/concurrent-ruby), \nwhich inspired [this library](https://github.com/didactic-drunk/concurrent.cr).\n\nAvailable classes:\n* [Concurrent::Enumerable](https://didactic-drunk.github.io/concurrent.cr/Concurrent/Stream.html)\n* [Concurrent::Channel](https://didactic-drunk.github.io/concurrent.cr/Concurrent/Stream.html)\n* [Concurrent::CountDownLatch](https://didactic-drunk.github.io/concurrent.cr/Concurrent/CountDownLatch.html)\n* [Concurrent::CyclicBarrier](https://didactic-drunk.github.io/concurrent.cr/Concurrent/CyclicBarrier.html)\n* [Concurrent::Semaphore](https://didactic-drunk.github.io/concurrent.cr/Concurrent/Semaphore.html)\n\nTODO:\n* [ ] Change Enumerable/Channel in to generic stream processing.\n* [ ] Enumerable/Channel custom error handling.\n\nMore algorithms are coming.  Contributions welcome.\n\n## Installation\n\n1. Add the dependency to your `shard.yml`:\n\n   ```yaml\n   dependencies:\n     concurrent:\n       github: didactic-drunk/concurrent.cr\n   ```\n\n2. Run `shards install`\n\n## Usage\n\n### Parallel map (experimental)\n```crystal\nrequire \"concurrent/enumerable\"\n\n(1..50).parallel.select(&.even?).map { |n| n + 1 }.serial.sum\n                 ^               ^                 ^ Results joined.\n                 |               | Spawns separate fiber pool\n                 | Spawns fiber pool\n\n\n(1..50).parallel.map { |n|\n  # Parallel processing in a fiber pool\n  Choose::A::ORM.new(id: n)\n}.batch(10).run { |batch_array|\n  # Run 10 Inserts inside a transaction for faster db writes\n  # Real applications should choose ~~~100-100000 depending on the database, schema, data & hardware\n  ORM.transaction do\n    batch_array.each do |record|\n      record.save!\n    end\n    # Or\n    batch_array.each &.save!\n  end\n  Or\n}.wait\n```\n\n### Stream processing from a `Channel` (experimental).\n```crystal\nrequire \"concurrent/channel\"\n\n# Same interface and restrictions as concurrent/enumerable.\n\nch = Channel(Int32).new\n\nspawn do\n  10.times { |i| ch.send 1 }\n  ch.close\nend\n\n# map is processed in a Fiber pool.\n# All other fibers will shut down after all messages are processed.\n# Any errors in processing are raised here.\nch.parallel.map { |n| n + 1 }.serial.sum\n```\n\n### Open ended stream processing aka simplified fiber pools (experimental)\n```crystal\nrequire \"concurrent/channel\"\n\n# Same interface and restrictions as concurrent/enumerable.\n\nch = Channel(Int32).new\n# Messages may be processed in parallel within each `tee` and `run`.\n# Make sure to use immutable objects or concurrency safe data structures.\nrun = ch.parallel.tee { |n| Log.info { \"n=#{n}\" } }.batch(2).run { |n| p n }\n\n10.times { |i| ch.send 1 }\nch.close\n\n# Wait until all messages/errors are processed.\nrun.wait\n```\n\n### CountDownLatch\n```crystal\nrequire \"concurrent/count_down_latch\"\n\nfiber_count = 10\nlatch = Concurrent::CountDownLatch.new\n10.times do\n  spawn do\n    # Do work\n    latch.count_down\n  end\nend\n\nlatch.wait_count = fiber_count\nlatch.wait\n```\n\n### Semaphore\n\n```crystal\nrequire \"concurrent/semaphore\"\n\nsem = Concurrent::Semaphore.new n\n\n# spawn a lot of fibers\n2000.times do\n  spawn do\n    sem.acquire do\n      ...\n    end\n  end\nend\n```\n\n## Development\n\nTODO: Write development instructions here\n\n## Contributing\n\n1. Fork it (<https://github.com/didactic-drunk/concurrent.cr/fork>)\n2. **Install a formatting check git hook (ln -sf ../../scripts/git/pre-commit .git/hooks)**\n3. Create your feature branch (`git checkout -b my-new-feature`)\n4. Commit your changes (`git commit -am 'Add some feature'`)\n5. Push to the branch (`git push origin my-new-feature`)\n6. Create a new Pull Request\n\n## Contributors\n\n- [Click](https://github.com/didactic-drunk/concurrent.cr/graphs/contributors) or Run `git shortlog --summary --numbered --email`\n","program":{"html_id":"concurrent/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"concurrent","program":true,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"concurrent/Array","path":"Array.html","kind":"class","full_name":"Array(T)","name":"Array","abstract":false,"superclass":{"html_id":"concurrent/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"concurrent/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"concurrent/Indexable","kind":"module","full_name":"Indexable","name":"Indexable"},{"html_id":"concurrent/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"concurrent/Iterable","kind":"module","full_name":"Iterable","name":"Iterable"},{"html_id":"concurrent/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"concurrent/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/concurrent/enumerable.cr","line_number":24,"url":"https://github.com/didactic-drunk/concurrent.cr/blob/1d0aea042131f60f55db3df4ef57b10bc82d0e5c/src/concurrent/enumerable.cr#L24"}],"repository_name":"concurrent","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[{"html_id":"concurrent/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"concurrent/Indexable","kind":"module","full_name":"Indexable","name":"Indexable"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"An `Array` is an ordered, integer-indexed collection of objects of type T.\n\nArray indexing starts at 0. A negative index is assumed to be\nrelative to the end of the array: -1 indicates the last element,\n-2 is the next to last element, and so on.\n\nAn `Array` can be created using the usual `new` method (several are provided), or with an array literal:\n\n```\nArray(Int32).new  # => []\n[1, 2, 3]         # Array(Int32)\n[1, \"hello\", 'x'] # Array(Int32 | String | Char)\n```\n\nAn `Array` can have mixed types, meaning T will be a union of types, but these are determined\nwhen the array is created, either by specifying T or by using an array literal. In the latter\ncase, T will be set to the union of the array literal elements' types.\n\nWhen creating an empty array you must always specify T:\n\n```\n[] of Int32 # same as Array(Int32)\n[]          # syntax error\n```\n\nAn `Array` is implemented using an internal buffer of some capacity\nand is reallocated when elements are pushed to it when more capacity\nis needed. This is normally known as a [dynamic array](http://en.wikipedia.org/wiki/Dynamic_array).\n\nYou can use a special array literal syntax with other types too, as long as they define an argless\n`new` method and a `<<` method. `Set` is one such type:\n\n```\nset = Set{1, 2, 3} # => Set{1, 2, 3}\nset.class          # => Set(Int32)\n```\n\nThe above is the same as this:\n\n```\nset = Set(typeof(1, 2, 3)).new\nset << 1\nset << 2\nset << 3\n```","summary":"<p>An <code><a href=\"Array.html\">Array</a></code> is an ordered, integer-indexed collection of objects of type T.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"parallel(*,fibers:Int32=System.cpu_count.to_i)-instance-method","html_id":"parallel(*,fibers:Int32=System.cpu_count.to_i)-instance-method","name":"parallel","doc":"TODO: better error handling\n*\nSee `Concurrent::Stream`","summary":"<p><span class=\"flag orange\">TODO</span>  better error handling * See <code><a href=\"Concurrent/Stream.html\">Concurrent::Stream</a></code></p>\n\n<p><span class=\"flag lime\">EXPERIMENTAL</span>  </p>\n\n","abstract":false,"args":[{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"fibers","doc":null,"default_value":"System.cpu_count.to_i","external_name":"fibers","restriction":"Int32"}],"args_string":"(*, fibers : Int32 = <span class=\"t\">System</span>.cpu_count.to_i)","args_html":"(*, fibers : Int32 = <span class=\"t\">System</span>.cpu_count.to_i)","location":{"filename":"src/concurrent/enumerable.cr","line_number":29,"url":"https://github.com/didactic-drunk/concurrent.cr/blob/1d0aea042131f60f55db3df4ef57b10bc82d0e5c/src/concurrent/enumerable.cr#L29"},"def":{"name":"parallel","args":[{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"fibers","doc":null,"default_value":"System.cpu_count.to_i","external_name":"fibers","restriction":"Int32"}],"double_splat":null,"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"dst_vch = Channel(T).new\nConcurrent::Stream::Source(T).new(fibers: fibers, dst_vch: dst_vch).tap do |parallel|\n  spawn do\n    begin\n      self.each do |o|\n        dst_vch.send(o)\n      end\n    rescue ex\n      (parallel.@dst_ech).send(ex)\n    ensure\n      parallel.close\n    end\n  end\nend\n"}}],"macros":[],"types":[]},{"html_id":"concurrent/Channel","path":"Channel.html","kind":"class","full_name":"Channel(T)","name":"Channel","abstract":false,"superclass":{"html_id":"concurrent/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"concurrent/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"concurrent/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/concurrent/channel.cr","line_number":3,"url":"https://github.com/didactic-drunk/concurrent.cr/blob/1d0aea042131f60f55db3df4ef57b10bc82d0e5c/src/concurrent/channel.cr#L3"}],"repository_name":"concurrent","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"A `Channel` enables concurrent communication between fibers.\n\nThey allow communicating data between fibers without sharing memory and without having to worry about locks, semaphores or other special structures.\n\n```\nchannel = Channel(Int32).new\n\nspawn do\n  channel.send(0)\n  channel.send(1)\nend\n\nchannel.receive # => 0\nchannel.receive # => 1\n```\n\nNOTE: Although a `Channel(Nil)` or any other nilable types like `Channel(Int32?)` are valid\nthey are discouraged since from certain methods or constructs it receiving a `nil` as data\nwill be indistinguishable from a closed channel.\n","summary":"<p>A <code><a href=\"Channel.html\">Channel</a></code> enables concurrent communication between fibers.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"parallel(*,fibers:Int32=System.cpu_count.to_i)-instance-method","html_id":"parallel(*,fibers:Int32=System.cpu_count.to_i)-instance-method","name":"parallel","doc":"TODO: better error handling\n*\nSee `Concurrent::Stream`","summary":"<p><span class=\"flag orange\">TODO</span>  better error handling * See <code><a href=\"Concurrent/Stream.html\">Concurrent::Stream</a></code></p>\n\n<p><span class=\"flag lime\">EXPERIMENTAL</span>  </p>\n\n","abstract":false,"args":[{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"fibers","doc":null,"default_value":"System.cpu_count.to_i","external_name":"fibers","restriction":"Int32"}],"args_string":"(*, fibers : Int32 = <span class=\"t\">System</span>.cpu_count.to_i)","args_html":"(*, fibers : Int32 = <span class=\"t\">System</span>.cpu_count.to_i)","location":{"filename":"src/concurrent/channel.cr","line_number":10,"url":"https://github.com/didactic-drunk/concurrent.cr/blob/1d0aea042131f60f55db3df4ef57b10bc82d0e5c/src/concurrent/channel.cr#L10"},"def":{"name":"parallel","args":[{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"fibers","doc":null,"default_value":"System.cpu_count.to_i","external_name":"fibers","restriction":"Int32"}],"double_splat":null,"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Concurrent::Stream::Source(T).new(fibers: fibers, dst_vch: self, dst_ech: ECH)"}}],"macros":[],"types":[]},{"html_id":"concurrent/Concurrent","path":"Concurrent.html","kind":"module","full_name":"Concurrent","name":"Concurrent","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/concurrent_docs.cr","line_number":1,"url":"https://github.com/didactic-drunk/concurrent.cr/blob/1d0aea042131f60f55db3df4ef57b10bc82d0e5c/src/concurrent_docs.cr#L1"}],"repository_name":"concurrent","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"concurrent/Concurrent/CountDownLatch","path":"Concurrent/CountDownLatch.html","kind":"class","full_name":"Concurrent::CountDownLatch","name":"CountDownLatch","abstract":false,"superclass":{"html_id":"concurrent/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"concurrent/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"concurrent/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/concurrent/count_down_latch.cr","line_number":10,"url":"https://github.com/didactic-drunk/concurrent.cr/blob/1d0aea042131f60f55db3df4ef57b10bc82d0e5c/src/concurrent/count_down_latch.cr#L10"}],"repository_name":"concurrent","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"concurrent/Concurrent","kind":"module","full_name":"Concurrent","name":"Concurrent"},"doc":"Allows fibers to wait until a series of operations performed in other fibers complete.\n\nThis class has additional capabilities not found in java or other implementations:\n- `wait_count` may be set at initialization or if not provided to initialize() any time after (only once between resets).\n- Reset is allowed after the latch is released.  The object may be reused but is not a cyclic barrier.\n\nA single atomic counter is used.\nThis implementation is 30-40% faster than using a Mutex or Channel::Buffered on Crystal 0.29.0-dev and likely to be faster still when\nchannels are thread safe.","summary":"<p>Allows fibers to wait until a series of operations performed in other fibers complete.</p>","class_methods":[],"constructors":[{"id":"new(saved_wait_count=0)-class-method","html_id":"new(saved_wait_count=0)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"saved_wait_count","doc":null,"default_value":"0","external_name":"saved_wait_count","restriction":""}],"args_string":"(saved_wait_count = <span class=\"n\">0</span>)","args_html":"(saved_wait_count = <span class=\"n\">0</span>)","location":{"filename":"src/concurrent/count_down_latch.cr","line_number":29,"url":"https://github.com/didactic-drunk/concurrent.cr/blob/1d0aea042131f60f55db3df4ef57b10bc82d0e5c/src/concurrent/count_down_latch.cr#L29"},"def":{"name":"new","args":[{"name":"saved_wait_count","doc":null,"default_value":"0","external_name":"saved_wait_count","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(saved_wait_count)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"count-instance-method","html_id":"count-instance-method","name":"count","doc":"Current count.","summary":"<p>Current count.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/concurrent/count_down_latch.cr","line_number":35,"url":"https://github.com/didactic-drunk/concurrent.cr/blob/1d0aea042131f60f55db3df4ef57b10bc82d0e5c/src/concurrent/count_down_latch.cr#L35"},"def":{"name":"count","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@count.get"}},{"id":"count_down:Nil-instance-method","html_id":"count_down:Nil-instance-method","name":"count_down","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Nil","args_html":" : Nil","location":{"filename":"src/concurrent/count_down_latch.cr","line_number":51,"url":"https://github.com/didactic-drunk/concurrent.cr/blob/1d0aea042131f60f55db3df4ef57b10bc82d0e5c/src/concurrent/count_down_latch.cr#L51"},"def":{"name":"count_down","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"prev = @count.sub(1)\ncase prev\nwhen 0\n  raise_ex(Error::CountExceeded.new(\"#{Fiber.current} counted past 0 wait_count=#{wait_count} saved_wait_count=#{@saved_wait_count}\"))\nwhen 1\n  release\nelse\nend\n"}},{"id":"count_up(n=1):Nil-instance-method","html_id":"count_up(n=1):Nil-instance-method","name":"count_up","doc":null,"summary":null,"abstract":false,"args":[{"name":"n","doc":null,"default_value":"1","external_name":"n","restriction":""}],"args_string":"(n = <span class=\"n\">1</span>) : Nil","args_html":"(n = <span class=\"n\">1</span>) : Nil","location":{"filename":"src/concurrent/count_down_latch.cr","line_number":63,"url":"https://github.com/didactic-drunk/concurrent.cr/blob/1d0aea042131f60f55db3df4ef57b10bc82d0e5c/src/concurrent/count_down_latch.cr#L63"},"def":{"name":"count_up","args":[{"name":"n","doc":null,"default_value":"1","external_name":"n","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"prev = @count.add(n)\nif prev <= 0\n  raise_ex(Error::CountExceeded.new(\"#{Fiber.current} Latch previously released.  Use count_add before count reaches 0. wait_count=#{wait_count} saved_wait_count=#{@saved_wait_count}\"))\nend\n"}},{"id":"error(ex:Exception):Nil-instance-method","html_id":"error(ex:Exception):Nil-instance-method","name":"error","doc":"Use instead of count_down.\nStores the first error and raises it when #wait is called.","summary":"<p>Use instead of count_down.</p>","abstract":false,"args":[{"name":"ex","doc":null,"default_value":"","external_name":"ex","restriction":"Exception"}],"args_string":"(ex : Exception) : Nil","args_html":"(ex : Exception) : Nil","location":{"filename":"src/concurrent/count_down_latch.cr","line_number":93,"url":"https://github.com/didactic-drunk/concurrent.cr/blob/1d0aea042131f60f55db3df4ef57b10bc82d0e5c/src/concurrent/count_down_latch.cr#L93"},"def":{"name":"error","args":[{"name":"ex","doc":null,"default_value":"","external_name":"ex","restriction":"Exception"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"@error.compare_and_set(nil, ex)\ncount_down\n"}},{"id":"reset-instance-method","html_id":"reset-instance-method","name":"reset","doc":"Only call reset after latch is released or after initialize.\nUndefined behavior if called between use of count_down and release.","summary":"<p>Only call reset after latch is released or after initialize.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/concurrent/count_down_latch.cr","line_number":106,"url":"https://github.com/didactic-drunk/concurrent.cr/blob/1d0aea042131f60f55db3df4ef57b10bc82d0e5c/src/concurrent/count_down_latch.cr#L106"},"def":{"name":"reset","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"cur_count = @count.get\nif ((cur_count == 0) || (cur_count == @saved_wait_count)) || (cur_count == Int32::MAX)\nelse\n  raise(Error::Internal.new(\"unknown state #{cur_count}\"))\nend\n@queue = Channel(Nil).new(1)\n@wait_count = @saved_wait_count\n@count.set((@wait_count == 0 ? Int32::MAX : @wait_count))\nself\n"}},{"id":"wait:self-instance-method","html_id":"wait:self-instance-method","name":"wait","doc":"Wait until count_down has been called wait_count times.\nTODO: timeout","summary":"<p>Wait until count_down has been called wait_count times.</p>","abstract":false,"args":[],"args_string":" : <span class=\"k\">self</span>","args_html":" : <span class=\"k\">self</span>","location":{"filename":"src/concurrent/count_down_latch.cr","line_number":41,"url":"https://github.com/didactic-drunk/concurrent.cr/blob/1d0aea042131f60f55db3df4ef57b10bc82d0e5c/src/concurrent/count_down_latch.cr#L41"},"def":{"name":"wait","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"begin\n  @queue.receive\n  self\nrescue Channel::ClosedError\n  if ex = @error.get\n    raise(ex)\n  end\n  self\nend"}},{"id":"wait_count:Int32-instance-method","html_id":"wait_count:Int32-instance-method","name":"wait_count","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Int32","args_html":" : Int32","location":{"filename":"src/concurrent/count_down_latch.cr","line_number":21,"url":"https://github.com/didactic-drunk/concurrent.cr/blob/1d0aea042131f60f55db3df4ef57b10bc82d0e5c/src/concurrent/count_down_latch.cr#L21"},"def":{"name":"wait_count","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@wait_count"}},{"id":"wait_count=(wait_count:Int32):Int32-instance-method","html_id":"wait_count=(wait_count:Int32):Int32-instance-method","name":"wait_count=","doc":"Must be set exactly once and only if not supplied to #initialize","summary":"<p>Must be set exactly once and only if not supplied to #initialize</p>","abstract":false,"args":[{"name":"wait_count","doc":null,"default_value":"","external_name":"wait_count","restriction":"Int32"}],"args_string":"(wait_count : Int32) : Int32","args_html":"(wait_count : Int32) : Int32","location":{"filename":"src/concurrent/count_down_latch.cr","line_number":71,"url":"https://github.com/didactic-drunk/concurrent.cr/blob/1d0aea042131f60f55db3df4ef57b10bc82d0e5c/src/concurrent/count_down_latch.cr#L71"},"def":{"name":"wait_count=","args":[{"name":"wait_count","doc":null,"default_value":"","external_name":"wait_count","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"if wait_count <= 0\n  raise(ArgumentError.new(\"wait_count <= 0\"))\nend\nif @wait_count != 0\n  raise(ArgumentError.new(\"wait_count already set\"))\nend\n@wait_count = wait_count\nsub = Int32::MAX - wait_count\nprev = @count.sub(sub)\ndiff = prev - sub\nif diff == 0\n  release\nelse\n  if diff < 0\n    raise_ex(Error::CountExceeded.new(\"#{Fiber.current} Count exceeded.  cnt=#{@count.get} wait_count=#{wait_count}\"))\n  end\nend\nwait_count\n"}}],"macros":[],"types":[{"html_id":"concurrent/Concurrent/CountDownLatch/Error","path":"Concurrent/CountDownLatch/Error.html","kind":"class","full_name":"Concurrent::CountDownLatch::Error","name":"Error","abstract":false,"superclass":{"html_id":"concurrent/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"concurrent/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"concurrent/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"concurrent/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/concurrent/count_down_latch.cr","line_number":11,"url":"https://github.com/didactic-drunk/concurrent.cr/blob/1d0aea042131f60f55db3df4ef57b10bc82d0e5c/src/concurrent/count_down_latch.cr#L11"}],"repository_name":"concurrent","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[{"html_id":"concurrent/Concurrent/CountDownLatch/Error/CountExceeded","kind":"class","full_name":"Concurrent::CountDownLatch::Error::CountExceeded","name":"CountExceeded"},{"html_id":"concurrent/Concurrent/CountDownLatch/Error/Internal","kind":"class","full_name":"Concurrent::CountDownLatch::Error::Internal","name":"Internal"}],"including_types":[],"namespace":{"html_id":"concurrent/Concurrent/CountDownLatch","kind":"class","full_name":"Concurrent::CountDownLatch","name":"CountDownLatch"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"concurrent/Concurrent/CountDownLatch/Error/CountExceeded","path":"Concurrent/CountDownLatch/Error/CountExceeded.html","kind":"class","full_name":"Concurrent::CountDownLatch::Error::CountExceeded","name":"CountExceeded","abstract":false,"superclass":{"html_id":"concurrent/Concurrent/CountDownLatch/Error","kind":"class","full_name":"Concurrent::CountDownLatch::Error","name":"Error"},"ancestors":[{"html_id":"concurrent/Concurrent/CountDownLatch/Error","kind":"class","full_name":"Concurrent::CountDownLatch::Error","name":"Error"},{"html_id":"concurrent/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"concurrent/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"concurrent/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/concurrent/count_down_latch.cr","line_number":12,"url":"https://github.com/didactic-drunk/concurrent.cr/blob/1d0aea042131f60f55db3df4ef57b10bc82d0e5c/src/concurrent/count_down_latch.cr#L12"}],"repository_name":"concurrent","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"concurrent/Concurrent/CountDownLatch/Error","kind":"class","full_name":"Concurrent::CountDownLatch::Error","name":"Error"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"concurrent/Concurrent/CountDownLatch/Error/Internal","path":"Concurrent/CountDownLatch/Error/Internal.html","kind":"class","full_name":"Concurrent::CountDownLatch::Error::Internal","name":"Internal","abstract":false,"superclass":{"html_id":"concurrent/Concurrent/CountDownLatch/Error","kind":"class","full_name":"Concurrent::CountDownLatch::Error","name":"Error"},"ancestors":[{"html_id":"concurrent/Concurrent/CountDownLatch/Error","kind":"class","full_name":"Concurrent::CountDownLatch::Error","name":"Error"},{"html_id":"concurrent/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"concurrent/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"concurrent/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/concurrent/count_down_latch.cr","line_number":15,"url":"https://github.com/didactic-drunk/concurrent.cr/blob/1d0aea042131f60f55db3df4ef57b10bc82d0e5c/src/concurrent/count_down_latch.cr#L15"}],"repository_name":"concurrent","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"concurrent/Concurrent/CountDownLatch/Error","kind":"class","full_name":"Concurrent::CountDownLatch::Error","name":"Error"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]}]}]},{"html_id":"concurrent/Concurrent/CyclicBarrier","path":"Concurrent/CyclicBarrier.html","kind":"class","full_name":"Concurrent::CyclicBarrier","name":"CyclicBarrier","abstract":false,"superclass":{"html_id":"concurrent/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"concurrent/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"concurrent/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/concurrent/cyclic_barrier.cr","line_number":2,"url":"https://github.com/didactic-drunk/concurrent.cr/blob/1d0aea042131f60f55db3df4ef57b10bc82d0e5c/src/concurrent/cyclic_barrier.cr#L2"}],"repository_name":"concurrent","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"concurrent/Concurrent","kind":"module","full_name":"Concurrent","name":"Concurrent"},"doc":"A synchronization aid that allows a set of fibers to all wait for each other to reach a common barrier point.","summary":"<p>A synchronization aid that allows a set of fibers to all wait for each other to reach a common barrier point.</p>","class_methods":[],"constructors":[{"id":"new(parties)-class-method","html_id":"new(parties)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"parties","doc":null,"default_value":"","external_name":"parties","restriction":""}],"args_string":"(parties)","args_html":"(parties)","location":{"filename":"src/concurrent/cyclic_barrier.cr","line_number":16,"url":"https://github.com/didactic-drunk/concurrent.cr/blob/1d0aea042131f60f55db3df4ef57b10bc82d0e5c/src/concurrent/cyclic_barrier.cr#L16"},"def":{"name":"new","args":[{"name":"parties","doc":null,"default_value":"","external_name":"parties","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(parties)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"broken?:Bool-instance-method","html_id":"broken?:Bool-instance-method","name":"broken?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Bool","args_html":" : Bool","location":{"filename":"src/concurrent/cyclic_barrier.cr","line_number":14,"url":"https://github.com/didactic-drunk/concurrent.cr/blob/1d0aea042131f60f55db3df4ef57b10bc82d0e5c/src/concurrent/cyclic_barrier.cr#L14"},"def":{"name":"broken?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@broken"}},{"id":"parties:Int32-instance-method","html_id":"parties:Int32-instance-method","name":"parties","doc":"Returns the number of fibers needed to pass the barrier.","summary":"<p>Returns the number of fibers needed to pass the barrier.</p>","abstract":false,"args":[],"args_string":" : Int32","args_html":" : Int32","location":{"filename":"src/concurrent/cyclic_barrier.cr","line_number":11,"url":"https://github.com/didactic-drunk/concurrent.cr/blob/1d0aea042131f60f55db3df4ef57b10bc82d0e5c/src/concurrent/cyclic_barrier.cr#L11"},"def":{"name":"parties","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"@parties"}},{"id":"wait-instance-method","html_id":"wait-instance-method","name":"wait","doc":"Wait until #wait has been called by @parties Fibers.\n\nTODO:\n* Accept a timeout","summary":"<p>Wait until #wait has been called by @parties Fibers.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/concurrent/cyclic_barrier.cr","line_number":27,"url":"https://github.com/didactic-drunk/concurrent.cr/blob/1d0aea042131f60f55db3df4ef57b10bc82d0e5c/src/concurrent/cyclic_barrier.cr#L27"},"def":{"name":"wait","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@lock.lock\nc = @count\nif c > 1\n  @count = c - 1\n  enqueue\nelse\n  if c == 1\n    release\n  else\n    abort(\"Impossible condition count=#{c} (memory corruption likely)\")\n  end\nend\nself\n"}}],"macros":[],"types":[{"html_id":"concurrent/Concurrent/CyclicBarrier/Error","path":"Concurrent/CyclicBarrier/Error.html","kind":"class","full_name":"Concurrent::CyclicBarrier::Error","name":"Error","abstract":false,"superclass":{"html_id":"concurrent/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"concurrent/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"concurrent/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"concurrent/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/concurrent/cyclic_barrier.cr","line_number":3,"url":"https://github.com/didactic-drunk/concurrent.cr/blob/1d0aea042131f60f55db3df4ef57b10bc82d0e5c/src/concurrent/cyclic_barrier.cr#L3"}],"repository_name":"concurrent","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[{"html_id":"concurrent/Concurrent/CyclicBarrier/Error/Broken","kind":"class","full_name":"Concurrent::CyclicBarrier::Error::Broken","name":"Broken"}],"including_types":[],"namespace":{"html_id":"concurrent/Concurrent/CyclicBarrier","kind":"class","full_name":"Concurrent::CyclicBarrier","name":"CyclicBarrier"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"concurrent/Concurrent/CyclicBarrier/Error/Broken","path":"Concurrent/CyclicBarrier/Error/Broken.html","kind":"class","full_name":"Concurrent::CyclicBarrier::Error::Broken","name":"Broken","abstract":false,"superclass":{"html_id":"concurrent/Concurrent/CyclicBarrier/Error","kind":"class","full_name":"Concurrent::CyclicBarrier::Error","name":"Error"},"ancestors":[{"html_id":"concurrent/Concurrent/CyclicBarrier/Error","kind":"class","full_name":"Concurrent::CyclicBarrier::Error","name":"Error"},{"html_id":"concurrent/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"concurrent/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"concurrent/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/concurrent/cyclic_barrier.cr","line_number":4,"url":"https://github.com/didactic-drunk/concurrent.cr/blob/1d0aea042131f60f55db3df4ef57b10bc82d0e5c/src/concurrent/cyclic_barrier.cr#L4"}],"repository_name":"concurrent","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"concurrent/Concurrent/CyclicBarrier/Error","kind":"class","full_name":"Concurrent::CyclicBarrier::Error","name":"Error"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]}]}]},{"html_id":"concurrent/Concurrent/Semaphore","path":"Concurrent/Semaphore.html","kind":"class","full_name":"Concurrent::Semaphore","name":"Semaphore","abstract":false,"superclass":{"html_id":"concurrent/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"concurrent/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"concurrent/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/concurrent/semaphore.cr","line_number":2,"url":"https://github.com/didactic-drunk/concurrent.cr/blob/1d0aea042131f60f55db3df4ef57b10bc82d0e5c/src/concurrent/semaphore.cr#L2"}],"repository_name":"concurrent","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"concurrent/Concurrent","kind":"module","full_name":"Concurrent","name":"Concurrent"},"doc":"A semaphore allows execution of at most `n` tasks simultaneously.","summary":"<p>A semaphore allows execution of at most <code>n</code> tasks simultaneously.</p>","class_methods":[],"constructors":[{"id":"new(n:Int32)-class-method","html_id":"new(n:Int32)-class-method","name":"new","doc":"Create a semaphore for `n` concurrent accesses.\nWill raise if `n <= 0`.","summary":"<p>Create a semaphore for <code>n</code> concurrent accesses.</p>","abstract":false,"args":[{"name":"n","doc":null,"default_value":"","external_name":"n","restriction":"Int32"}],"args_string":"(n : Int32)","args_html":"(n : Int32)","location":{"filename":"src/concurrent/semaphore.cr","line_number":5,"url":"https://github.com/didactic-drunk/concurrent.cr/blob/1d0aea042131f60f55db3df4ef57b10bc82d0e5c/src/concurrent/semaphore.cr#L5"},"def":{"name":"new","args":[{"name":"n","doc":null,"default_value":"","external_name":"n","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(n)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"acquire(&)-instance-method","html_id":"acquire(&)-instance-method","name":"acquire","doc":"Acquire an item from the semaphore, calling the block, and then safely\nreleasing the semaphore.","summary":"<p>Acquire an item from the semaphore, calling the block, and then safely releasing the semaphore.</p>","abstract":false,"args":[],"args_string":"(&)","args_html":"(&)","location":{"filename":"src/concurrent/semaphore.cr","line_number":13,"url":"https://github.com/didactic-drunk/concurrent.cr/blob/1d0aea042131f60f55db3df4ef57b10bc82d0e5c/src/concurrent/semaphore.cr#L13"},"def":{"name":"acquire","args":[],"double_splat":null,"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"@wait.receive\nbegin\n  yield\nensure\n  @wait.send(nil)\nend\n"}}],"macros":[],"types":[]},{"html_id":"concurrent/Concurrent/Stream","path":"Concurrent/Stream.html","kind":"module","full_name":"Concurrent::Stream","name":"Stream","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/concurrent/stream.cr","line_number":30,"url":"https://github.com/didactic-drunk/concurrent.cr/blob/1d0aea042131f60f55db3df4ef57b10bc82d0e5c/src/concurrent/stream.cr#L30"}],"repository_name":"concurrent","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[{"id":"Log","name":"Log","value":"::Log.for(self)","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"concurrent/Concurrent","kind":"module","full_name":"Concurrent","name":"Concurrent"},"doc":"Influenced by [Ruby parallel](https://github.com/grosser/parallel)\nand [Java streams](https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html).\n\n## Creating a stream:\n* Channel#parallel creates a Stream::Source reading from the Channel.\n* Enumerable#parallel creates a Channel and Stream::Source reading from it.\n\n## Stream operations:\n* #map { } - Same as Enumerable#map but runs in a fiber pool.\n* #select { } - Same as Enumerable#select but runs in a fiber pool.\n* #batch(size) { } - Groups results in to chunks up to the given size.\n* #run { } - Runs block in a fiber pool.  Further processing is not possible except for #wait.\n* #tee { } - Runs block in a fiber pool passing the original message to the next Stream.\n* #serial - returns an Enumerable collecting results from a parallel Stream.\n\n## Final results and error handling\nAll method chains should end with #wait, #serial, or #to_a all of which gather errors and end parallel processing.\nYou may omit calling #wait when using #run for background tasks where completion is not guaranteed.\nWhen used in this fashion make sure to catch all exceptions in the run block or the internal exception channel may fill.\ncausing the entire pipeline to stop.\n\n## Error handling\nUse #wait, #serial, or #to_a receive errors or rescue within any blocks.\nBetter handling is a WIP.\n","summary":"<p>Influenced by <a href=\"https://github.com/grosser/parallel\">Ruby parallel</a> and <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html\">Java streams</a>.</p>\n\n<p><span class=\"flag lime\">EXPERIMENTAL</span>  </p>\n\n","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"concurrent/Concurrent/Stream/Base","path":"Concurrent/Stream/Base.html","kind":"class","full_name":"Concurrent::Stream::Base(T)","name":"Base","abstract":true,"superclass":{"html_id":"concurrent/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"concurrent/Concurrent/Stream/Receive","kind":"module","full_name":"Concurrent::Stream::Receive","name":"Receive"},{"html_id":"concurrent/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"concurrent/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/concurrent/stream.cr","line_number":112,"url":"https://github.com/didactic-drunk/concurrent.cr/blob/1d0aea042131f60f55db3df4ef57b10bc82d0e5c/src/concurrent/stream.cr#L112"}],"repository_name":"concurrent","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[{"html_id":"concurrent/Concurrent/Stream/Receive","kind":"module","full_name":"Concurrent::Stream::Receive","name":"Receive"}],"extended_modules":[],"subclasses":[{"html_id":"concurrent/Concurrent/Stream/Batch","kind":"class","full_name":"Concurrent::Stream::Batch(S, D)","name":"Batch"},{"html_id":"concurrent/Concurrent/Stream/Map","kind":"class","full_name":"Concurrent::Stream::Map(S, D)","name":"Map"},{"html_id":"concurrent/Concurrent/Stream/Run","kind":"class","full_name":"Concurrent::Stream::Run(S)","name":"Run"},{"html_id":"concurrent/Concurrent/Stream/Select","kind":"class","full_name":"Concurrent::Stream::Select(S)","name":"Select"},{"html_id":"concurrent/Concurrent/Stream/Source","kind":"class","full_name":"Concurrent::Stream::Source(T)","name":"Source"},{"html_id":"concurrent/Concurrent/Stream/Tee","kind":"class","full_name":"Concurrent::Stream::Tee(S)","name":"Tee"}],"including_types":[],"namespace":{"html_id":"concurrent/Concurrent/Stream","kind":"module","full_name":"Concurrent::Stream","name":"Stream"},"doc":"`map`, `select`, `run` and `tee` run in a fiber pool.\n`batch` runs in a single fiber.\nAll other methods \"join\" in the calling fiber.\n\nExceptions are raised in #each when joined.\n\nTODO: better error handling.","summary":"<p><code><a href=\"../../Concurrent/Stream/Base.html#map(*,fibers:Int32?=nil,&block:T-%3EU)forallU-instance-method\">#map</a></code>, <code><a href=\"../../Concurrent/Stream/Base.html#select(*,fibers:Int32?=nil,&block:T-%3EBool)-instance-method\">#select</a></code>, <code><a href=\"../../Concurrent/Stream/Base.html#run(*,fibers:Int32?=nil,&block:T-%3E_)-instance-method\">#run</a></code> and <code><a href=\"../../Concurrent/Stream/Base.html#tee(*,fibers:Int32?=nil,&block:T-%3E_)-instance-method\">#tee</a></code> run in a fiber pool.</p>","class_methods":[],"constructors":[{"id":"new(*,fibers:Int32,dst_vch:Channel(T),dst_ech:Channel(Exception)?=nil)-class-method","html_id":"new(*,fibers:Int32,dst_vch:Channel(T),dst_ech:Channel(Exception)?=nil)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"fibers","doc":null,"default_value":"","external_name":"fibers","restriction":"Int32"},{"name":"dst_vch","doc":null,"default_value":"","external_name":"dst_vch","restriction":"Channel(T)"},{"name":"dst_ech","doc":null,"default_value":"nil","external_name":"dst_ech","restriction":"Channel(Exception) | ::Nil"}],"args_string":"(*, fibers : Int32, dst_vch : Channel(T), dst_ech : Channel(Exception)? = <span class=\"n\">nil</span>)","args_html":"(*, fibers : Int32, dst_vch : <a href=\"../../Channel.html\">Channel</a>(T), dst_ech : <a href=\"../../Channel.html\">Channel</a>(Exception)? = <span class=\"n\">nil</span>)","location":{"filename":"src/concurrent/stream.cr","line_number":124,"url":"https://github.com/didactic-drunk/concurrent.cr/blob/1d0aea042131f60f55db3df4ef57b10bc82d0e5c/src/concurrent/stream.cr#L124"},"def":{"name":"new","args":[{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"fibers","doc":null,"default_value":"","external_name":"fibers","restriction":"Int32"},{"name":"dst_vch","doc":null,"default_value":"","external_name":"dst_vch","restriction":"Channel(T)"},{"name":"dst_ech","doc":null,"default_value":"nil","external_name":"dst_ech","restriction":"Channel(Exception) | ::Nil"}],"double_splat":null,"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = Base(T).allocate\n_.initialize(fibers: fibers, dst_vch: dst_vch, dst_ech: dst_ech)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"batch(size:Int32)-instance-method","html_id":"batch(size:Int32)-instance-method","name":"batch","doc":"Parallel batch.  Runs in a single fiber.  Multiple fibers would delay further stream processing.","summary":"<p>Parallel batch.</p>","abstract":false,"args":[{"name":"size","doc":null,"default_value":"","external_name":"size","restriction":"Int32"}],"args_string":"(size : Int32)","args_html":"(size : Int32)","location":{"filename":"src/concurrent/stream.cr","line_number":175,"url":"https://github.com/didactic-drunk/concurrent.cr/blob/1d0aea042131f60f55db3df4ef57b10bc82d0e5c/src/concurrent/stream.cr#L175"},"def":{"name":"batch","args":[{"name":"size","doc":null,"default_value":"","external_name":"size","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if size <= 0\n  raise(ArgumentError.new(\"Size must be positive\"))\nend\noutput = Batch(T, typeof(@dst_vch.receive.not_nil!)).new(@dst_vch, @dst_ech, batch_size: size)\noutput\n"}},{"id":"close:Nil-instance-method","html_id":"close:Nil-instance-method","name":"close","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Nil","args_html":" : Nil","location":{"filename":"src/concurrent/stream.cr","line_number":196,"url":"https://github.com/didactic-drunk/concurrent.cr/blob/1d0aea042131f60f55db3df4ef57b10bc82d0e5c/src/concurrent/stream.cr#L196"},"def":{"name":"close","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"begin\n  if @closed\n    return\n  end\n  @closed = true\n  @dst_vch.close\n  @dst_ech.close\nensure\n  @wait.done\nend"}},{"id":"map(*,fibers:Int32?=nil,&block:T->U)forallU-instance-method","html_id":"map(*,fibers:Int32?=nil,&block:T->U)forallU-instance-method","name":"map","doc":"Parallel map.  `&block` is evaluated in a fiber pool.","summary":"<p>Parallel map.</p>","abstract":false,"args":[{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"fibers","doc":null,"default_value":"nil","external_name":"fibers","restriction":"Int32 | ::Nil"}],"args_string":"(*, fibers : Int32? = <span class=\"n\">nil</span>, &block : T -> U) forall U","args_html":"(*, fibers : Int32? = <span class=\"n\">nil</span>, &block : T -> U) forall U","location":{"filename":"src/concurrent/stream.cr","line_number":163,"url":"https://github.com/didactic-drunk/concurrent.cr/blob/1d0aea042131f60f55db3df4ef57b10bc82d0e5c/src/concurrent/stream.cr#L163"},"def":{"name":"map","args":[{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"fibers","doc":null,"default_value":"nil","external_name":"fibers","restriction":"Int32 | ::Nil"}],"double_splat":null,"splat_index":0,"yields":1,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(T -> U)"},"return_type":"","visibility":"Public","body":"output = Map(T, U).new(@dst_vch, @dst_ech, fibers: (fibers || @fibers), &block)\noutput\n"}},{"id":"run(*,fibers:Int32?=nil,&block:T->_)-instance-method","html_id":"run(*,fibers:Int32?=nil,&block:T->_)-instance-method","name":"run","doc":"Parallel run.  `&block` is evaluated in a fiber pool.\nFurther processing is not possible except for #wait.","summary":"<p>Parallel run.</p>","abstract":false,"args":[{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"fibers","doc":null,"default_value":"nil","external_name":"fibers","restriction":"Int32 | ::Nil"}],"args_string":"(*, fibers : Int32? = <span class=\"n\">nil</span>, &block : T -> _)","args_html":"(*, fibers : Int32? = <span class=\"n\">nil</span>, &block : T -> _)","location":{"filename":"src/concurrent/stream.cr","line_number":184,"url":"https://github.com/didactic-drunk/concurrent.cr/blob/1d0aea042131f60f55db3df4ef57b10bc82d0e5c/src/concurrent/stream.cr#L184"},"def":{"name":"run","args":[{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"fibers","doc":null,"default_value":"nil","external_name":"fibers","restriction":"Int32 | ::Nil"}],"double_splat":null,"splat_index":0,"yields":1,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(T -> _)"},"return_type":"","visibility":"Public","body":"output = Run(T).new(@dst_vch, @dst_ech, fibers: (fibers || @fibers), &block)\noutput\n"}},{"id":"select(*,fibers:Int32?=nil,&block:T->Bool)-instance-method","html_id":"select(*,fibers:Int32?=nil,&block:T->Bool)-instance-method","name":"select","doc":"Parallel select.  `&block` is evaluated in a fiber pool.","summary":"<p>Parallel select.</p>","abstract":false,"args":[{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"fibers","doc":null,"default_value":"nil","external_name":"fibers","restriction":"Int32 | ::Nil"}],"args_string":"(*, fibers : Int32? = <span class=\"n\">nil</span>, &block : T -> Bool)","args_html":"(*, fibers : Int32? = <span class=\"n\">nil</span>, &block : T -> Bool)","location":{"filename":"src/concurrent/stream.cr","line_number":169,"url":"https://github.com/didactic-drunk/concurrent.cr/blob/1d0aea042131f60f55db3df4ef57b10bc82d0e5c/src/concurrent/stream.cr#L169"},"def":{"name":"select","args":[{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"fibers","doc":null,"default_value":"nil","external_name":"fibers","restriction":"Int32 | ::Nil"}],"double_splat":null,"splat_index":0,"yields":1,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(T -> Bool)"},"return_type":"","visibility":"Public","body":"output = Select(T).new(@dst_vch, @dst_ech, fibers: (fibers || @fibers), &block)\noutput\n"}},{"id":"serial-instance-method","html_id":"serial-instance-method","name":"serial","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/concurrent/stream.cr","line_number":154,"url":"https://github.com/didactic-drunk/concurrent.cr/blob/1d0aea042131f60f55db3df4ef57b10bc82d0e5c/src/concurrent/stream.cr#L154"},"def":{"name":"serial","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Serial(T).new(@dst_vch, @dst_ech)"}},{"id":"tee(*,fibers:Int32?=nil,&block:T->_)-instance-method","html_id":"tee(*,fibers:Int32?=nil,&block:T->_)-instance-method","name":"tee","doc":"Parallel tee.  `&block` is evaluated in a fiber pool.\nThe original message is passed to the next Stream.","summary":"<p>Parallel tee.</p>","abstract":false,"args":[{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"fibers","doc":null,"default_value":"nil","external_name":"fibers","restriction":"Int32 | ::Nil"}],"args_string":"(*, fibers : Int32? = <span class=\"n\">nil</span>, &block : T -> _)","args_html":"(*, fibers : Int32? = <span class=\"n\">nil</span>, &block : T -> _)","location":{"filename":"src/concurrent/stream.cr","line_number":191,"url":"https://github.com/didactic-drunk/concurrent.cr/blob/1d0aea042131f60f55db3df4ef57b10bc82d0e5c/src/concurrent/stream.cr#L191"},"def":{"name":"tee","args":[{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"fibers","doc":null,"default_value":"nil","external_name":"fibers","restriction":"Int32 | ::Nil"}],"double_splat":null,"splat_index":0,"yields":1,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(T -> _)"},"return_type":"","visibility":"Public","body":"output = Tee(T).new(@dst_vch, @dst_ech, fibers: (fibers || @fibers), &block)\noutput\n"}},{"id":"to_a(*args,**options)-instance-method","html_id":"to_a(*args,**options)-instance-method","name":"to_a","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/concurrent/stream.cr","line_number":120,"url":"https://github.com/didactic-drunk/concurrent.cr/blob/1d0aea042131f60f55db3df4ef57b10bc82d0e5c/src/concurrent/stream.cr#L120"},"def":{"name":"to_a","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"serial.to_a(*args, **options)"}},{"id":"to_a(*args,**options,&)-instance-method","html_id":"to_a(*args,**options,&)-instance-method","name":"to_a","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/concurrent/stream.cr","line_number":120,"url":"https://github.com/didactic-drunk/concurrent.cr/blob/1d0aea042131f60f55db3df4ef57b10bc82d0e5c/src/concurrent/stream.cr#L120"},"def":{"name":"to_a","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"serial.to_a(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"id":"wait(*args,**options)-instance-method","html_id":"wait(*args,**options)-instance-method","name":"wait","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/concurrent/stream.cr","line_number":122,"url":"https://github.com/didactic-drunk/concurrent.cr/blob/1d0aea042131f60f55db3df4ef57b10bc82d0e5c/src/concurrent/stream.cr#L122"},"def":{"name":"wait","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@wait.wait(*args, **options)"}},{"id":"wait(*args,**options,&)-instance-method","html_id":"wait(*args,**options,&)-instance-method","name":"wait","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/concurrent/stream.cr","line_number":122,"url":"https://github.com/didactic-drunk/concurrent.cr/blob/1d0aea042131f60f55db3df4ef57b10bc82d0e5c/src/concurrent/stream.cr#L122"},"def":{"name":"wait","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"@wait.wait(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}}],"macros":[],"types":[]},{"html_id":"concurrent/Concurrent/Stream/Batch","path":"Concurrent/Stream/Batch.html","kind":"class","full_name":"Concurrent::Stream::Batch(S, D)","name":"Batch","abstract":false,"superclass":{"html_id":"concurrent/Concurrent/Stream/Base","kind":"class","full_name":"Concurrent::Stream::Base","name":"Base"},"ancestors":[{"html_id":"concurrent/Concurrent/Stream/Base","kind":"class","full_name":"Concurrent::Stream::Base","name":"Base"},{"html_id":"concurrent/Concurrent/Stream/Receive","kind":"module","full_name":"Concurrent::Stream::Receive","name":"Receive"},{"html_id":"concurrent/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"concurrent/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/concurrent/stream.cr","line_number":258,"url":"https://github.com/didactic-drunk/concurrent.cr/blob/1d0aea042131f60f55db3df4ef57b10bc82d0e5c/src/concurrent/stream.cr#L258"}],"repository_name":"concurrent","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"concurrent/Concurrent/Stream","kind":"module","full_name":"Concurrent::Stream","name":"Stream"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(src_vch:Channel(S),src_ech:Channel(Exception),*,batch_size:Int32)-class-method","html_id":"new(src_vch:Channel(S),src_ech:Channel(Exception),*,batch_size:Int32)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"src_vch","doc":null,"default_value":"","external_name":"src_vch","restriction":"Channel(S)"},{"name":"src_ech","doc":null,"default_value":"","external_name":"src_ech","restriction":"Channel(Exception)"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"batch_size","doc":null,"default_value":"","external_name":"batch_size","restriction":"Int32"}],"args_string":"(src_vch : Channel(S), src_ech : Channel(Exception), *, batch_size : Int32)","args_html":"(src_vch : <a href=\"../../Channel.html\">Channel</a>(S), src_ech : <a href=\"../../Channel.html\">Channel</a>(Exception), *, batch_size : Int32)","location":{"filename":"src/concurrent/stream.cr","line_number":261,"url":"https://github.com/didactic-drunk/concurrent.cr/blob/1d0aea042131f60f55db3df4ef57b10bc82d0e5c/src/concurrent/stream.cr#L261"},"def":{"name":"new","args":[{"name":"src_vch","doc":null,"default_value":"","external_name":"src_vch","restriction":"Channel(S)"},{"name":"src_ech","doc":null,"default_value":"","external_name":"src_ech","restriction":"Channel(Exception)"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"batch_size","doc":null,"default_value":"","external_name":"batch_size","restriction":"Int32"}],"double_splat":null,"splat_index":2,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = Batch(S, D).allocate\n_.initialize(src_vch, src_ech, batch_size: batch_size)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[],"macros":[],"types":[]},{"html_id":"concurrent/Concurrent/Stream/Map","path":"Concurrent/Stream/Map.html","kind":"class","full_name":"Concurrent::Stream::Map(S, D)","name":"Map","abstract":false,"superclass":{"html_id":"concurrent/Concurrent/Stream/Base","kind":"class","full_name":"Concurrent::Stream::Base","name":"Base"},"ancestors":[{"html_id":"concurrent/Concurrent/Stream/Base","kind":"class","full_name":"Concurrent::Stream::Base","name":"Base"},{"html_id":"concurrent/Concurrent/Stream/Receive","kind":"module","full_name":"Concurrent::Stream::Receive","name":"Receive"},{"html_id":"concurrent/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"concurrent/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/concurrent/stream.cr","line_number":233,"url":"https://github.com/didactic-drunk/concurrent.cr/blob/1d0aea042131f60f55db3df4ef57b10bc82d0e5c/src/concurrent/stream.cr#L233"}],"repository_name":"concurrent","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"concurrent/Concurrent/Stream","kind":"module","full_name":"Concurrent::Stream","name":"Stream"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(src_vch:Channel(S),src_ech:Channel(Exception),*,fibers:Int32,&block:S->D)-class-method","html_id":"new(src_vch:Channel(S),src_ech:Channel(Exception),*,fibers:Int32,&block:S->D)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"src_vch","doc":null,"default_value":"","external_name":"src_vch","restriction":"Channel(S)"},{"name":"src_ech","doc":null,"default_value":"","external_name":"src_ech","restriction":"Channel(Exception)"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"fibers","doc":null,"default_value":"","external_name":"fibers","restriction":"Int32"}],"args_string":"(src_vch : Channel(S), src_ech : Channel(Exception), *, fibers : Int32, &block : S -> D)","args_html":"(src_vch : <a href=\"../../Channel.html\">Channel</a>(S), src_ech : <a href=\"../../Channel.html\">Channel</a>(Exception), *, fibers : Int32, &block : S -> D)","location":{"filename":"src/concurrent/stream.cr","line_number":234,"url":"https://github.com/didactic-drunk/concurrent.cr/blob/1d0aea042131f60f55db3df4ef57b10bc82d0e5c/src/concurrent/stream.cr#L234"},"def":{"name":"new","args":[{"name":"src_vch","doc":null,"default_value":"","external_name":"src_vch","restriction":"Channel(S)"},{"name":"src_ech","doc":null,"default_value":"","external_name":"src_ech","restriction":"Channel(Exception)"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"fibers","doc":null,"default_value":"","external_name":"fibers","restriction":"Int32"}],"double_splat":null,"splat_index":2,"yields":1,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(S -> D)"},"return_type":"","visibility":"Public","body":"_ = Map(S, D).allocate\n_.initialize(src_vch, src_ech, fibers: fibers, &block) do |_arg0|\n  yield _arg0\nend\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[],"macros":[],"types":[]},{"html_id":"concurrent/Concurrent/Stream/Run","path":"Concurrent/Stream/Run.html","kind":"class","full_name":"Concurrent::Stream::Run(S)","name":"Run","abstract":false,"superclass":{"html_id":"concurrent/Concurrent/Stream/Base","kind":"class","full_name":"Concurrent::Stream::Base","name":"Base"},"ancestors":[{"html_id":"concurrent/Concurrent/Stream/Base","kind":"class","full_name":"Concurrent::Stream::Base","name":"Base"},{"html_id":"concurrent/Concurrent/Stream/Receive","kind":"module","full_name":"Concurrent::Stream::Receive","name":"Receive"},{"html_id":"concurrent/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"concurrent/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/concurrent/stream.cr","line_number":288,"url":"https://github.com/didactic-drunk/concurrent.cr/blob/1d0aea042131f60f55db3df4ef57b10bc82d0e5c/src/concurrent/stream.cr#L288"}],"repository_name":"concurrent","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"concurrent/Concurrent/Stream","kind":"module","full_name":"Concurrent::Stream","name":"Stream"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(src_vch:Channel(S),src_ech:Channel(Exception),*,fibers:Int32,&block:S->_)-class-method","html_id":"new(src_vch:Channel(S),src_ech:Channel(Exception),*,fibers:Int32,&block:S->_)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"src_vch","doc":null,"default_value":"","external_name":"src_vch","restriction":"Channel(S)"},{"name":"src_ech","doc":null,"default_value":"","external_name":"src_ech","restriction":"Channel(Exception)"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"fibers","doc":null,"default_value":"","external_name":"fibers","restriction":"Int32"}],"args_string":"(src_vch : Channel(S), src_ech : Channel(Exception), *, fibers : Int32, &block : S -> _)","args_html":"(src_vch : <a href=\"../../Channel.html\">Channel</a>(S), src_ech : <a href=\"../../Channel.html\">Channel</a>(Exception), *, fibers : Int32, &block : S -> _)","location":{"filename":"src/concurrent/stream.cr","line_number":289,"url":"https://github.com/didactic-drunk/concurrent.cr/blob/1d0aea042131f60f55db3df4ef57b10bc82d0e5c/src/concurrent/stream.cr#L289"},"def":{"name":"new","args":[{"name":"src_vch","doc":null,"default_value":"","external_name":"src_vch","restriction":"Channel(S)"},{"name":"src_ech","doc":null,"default_value":"","external_name":"src_ech","restriction":"Channel(Exception)"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"fibers","doc":null,"default_value":"","external_name":"fibers","restriction":"Int32"}],"double_splat":null,"splat_index":2,"yields":1,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(S -> _)"},"return_type":"","visibility":"Public","body":"_ = Run(S).allocate\n_.initialize(src_vch, src_ech, fibers: fibers, &block) do |_arg0|\n  yield _arg0\nend\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[],"macros":[],"types":[]},{"html_id":"concurrent/Concurrent/Stream/Select","path":"Concurrent/Stream/Select.html","kind":"class","full_name":"Concurrent::Stream::Select(S)","name":"Select","abstract":false,"superclass":{"html_id":"concurrent/Concurrent/Stream/Base","kind":"class","full_name":"Concurrent::Stream::Base","name":"Base"},"ancestors":[{"html_id":"concurrent/Concurrent/Stream/Base","kind":"class","full_name":"Concurrent::Stream::Base","name":"Base"},{"html_id":"concurrent/Concurrent/Stream/Receive","kind":"module","full_name":"Concurrent::Stream::Receive","name":"Receive"},{"html_id":"concurrent/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"concurrent/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/concurrent/stream.cr","line_number":246,"url":"https://github.com/didactic-drunk/concurrent.cr/blob/1d0aea042131f60f55db3df4ef57b10bc82d0e5c/src/concurrent/stream.cr#L246"}],"repository_name":"concurrent","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"concurrent/Concurrent/Stream","kind":"module","full_name":"Concurrent::Stream","name":"Stream"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(src_vch:Channel(S),src_ech:Channel(Exception),*,fibers:Int32,&block:S->Bool)-class-method","html_id":"new(src_vch:Channel(S),src_ech:Channel(Exception),*,fibers:Int32,&block:S->Bool)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"src_vch","doc":null,"default_value":"","external_name":"src_vch","restriction":"Channel(S)"},{"name":"src_ech","doc":null,"default_value":"","external_name":"src_ech","restriction":"Channel(Exception)"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"fibers","doc":null,"default_value":"","external_name":"fibers","restriction":"Int32"}],"args_string":"(src_vch : Channel(S), src_ech : Channel(Exception), *, fibers : Int32, &block : S -> Bool)","args_html":"(src_vch : <a href=\"../../Channel.html\">Channel</a>(S), src_ech : <a href=\"../../Channel.html\">Channel</a>(Exception), *, fibers : Int32, &block : S -> Bool)","location":{"filename":"src/concurrent/stream.cr","line_number":247,"url":"https://github.com/didactic-drunk/concurrent.cr/blob/1d0aea042131f60f55db3df4ef57b10bc82d0e5c/src/concurrent/stream.cr#L247"},"def":{"name":"new","args":[{"name":"src_vch","doc":null,"default_value":"","external_name":"src_vch","restriction":"Channel(S)"},{"name":"src_ech","doc":null,"default_value":"","external_name":"src_ech","restriction":"Channel(Exception)"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"fibers","doc":null,"default_value":"","external_name":"fibers","restriction":"Int32"}],"double_splat":null,"splat_index":2,"yields":1,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(S -> Bool)"},"return_type":"","visibility":"Public","body":"_ = Select(S).allocate\n_.initialize(src_vch, src_ech, fibers: fibers, &block) do |_arg0|\n  yield _arg0\nend\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[],"macros":[],"types":[]},{"html_id":"concurrent/Concurrent/Stream/Serial","path":"Concurrent/Stream/Serial.html","kind":"class","full_name":"Concurrent::Stream::Serial(T)","name":"Serial","abstract":false,"superclass":{"html_id":"concurrent/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"concurrent/Concurrent/Stream/Receive","kind":"module","full_name":"Concurrent::Stream::Receive","name":"Receive"},{"html_id":"concurrent/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"concurrent/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"concurrent/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/concurrent/stream.cr","line_number":211,"url":"https://github.com/didactic-drunk/concurrent.cr/blob/1d0aea042131f60f55db3df4ef57b10bc82d0e5c/src/concurrent/stream.cr#L211"}],"repository_name":"concurrent","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[{"html_id":"concurrent/Concurrent/Stream/Receive","kind":"module","full_name":"Concurrent::Stream::Receive","name":"Receive"},{"html_id":"concurrent/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"concurrent/Concurrent/Stream","kind":"module","full_name":"Concurrent::Stream","name":"Stream"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(src_vch:Channel(T),src_ech:Channel(Exception))-class-method","html_id":"new(src_vch:Channel(T),src_ech:Channel(Exception))-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"src_vch","doc":null,"default_value":"","external_name":"src_vch","restriction":"Channel(T)"},{"name":"src_ech","doc":null,"default_value":"","external_name":"src_ech","restriction":"Channel(Exception)"}],"args_string":"(src_vch : Channel(T), src_ech : Channel(Exception))","args_html":"(src_vch : <a href=\"../../Channel.html\">Channel</a>(T), src_ech : <a href=\"../../Channel.html\">Channel</a>(Exception))","location":{"filename":"src/concurrent/stream.cr","line_number":215,"url":"https://github.com/didactic-drunk/concurrent.cr/blob/1d0aea042131f60f55db3df4ef57b10bc82d0e5c/src/concurrent/stream.cr#L215"},"def":{"name":"new","args":[{"name":"src_vch","doc":null,"default_value":"","external_name":"src_vch","restriction":"Channel(T)"},{"name":"src_ech","doc":null,"default_value":"","external_name":"src_ech","restriction":"Channel(Exception)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = Serial(T).allocate\n_.initialize(src_vch, src_ech)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"each(&)-instance-method","html_id":"each(&)-instance-method","name":"each","doc":"Must yield this collection's elements to the block.","summary":"<p>Must yield this collection's elements to the block.</p>","abstract":false,"args":[],"args_string":"(&)","args_html":"(&)","location":{"filename":"src/concurrent/stream.cr","line_number":218,"url":"https://github.com/didactic-drunk/concurrent.cr/blob/1d0aea042131f60f55db3df4ef57b10bc82d0e5c/src/concurrent/stream.cr#L218"},"def":{"name":"each","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"receive_loop(@src_vch, @src_ech, nil) do |msg|\n  yield msg\nend"}}],"macros":[],"types":[]},{"html_id":"concurrent/Concurrent/Stream/Source","path":"Concurrent/Stream/Source.html","kind":"class","full_name":"Concurrent::Stream::Source(T)","name":"Source","abstract":false,"superclass":{"html_id":"concurrent/Concurrent/Stream/Base","kind":"class","full_name":"Concurrent::Stream::Base","name":"Base"},"ancestors":[{"html_id":"concurrent/Concurrent/Stream/Base","kind":"class","full_name":"Concurrent::Stream::Base","name":"Base"},{"html_id":"concurrent/Concurrent/Stream/Receive","kind":"module","full_name":"Concurrent::Stream::Receive","name":"Receive"},{"html_id":"concurrent/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"concurrent/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/concurrent/stream.cr","line_number":226,"url":"https://github.com/didactic-drunk/concurrent.cr/blob/1d0aea042131f60f55db3df4ef57b10bc82d0e5c/src/concurrent/stream.cr#L226"}],"repository_name":"concurrent","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"concurrent/Concurrent/Stream","kind":"module","full_name":"Concurrent::Stream","name":"Stream"},"doc":"Input from an Enumerable or Channel.","summary":"<p>Input from an Enumerable or Channel.</p>","class_methods":[],"constructors":[{"id":"new(*,fibers:Int32,dst_vch:Channel(T),dst_ech:Channel(Exception)?=nil)-class-method","html_id":"new(*,fibers:Int32,dst_vch:Channel(T),dst_ech:Channel(Exception)?=nil)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"fibers","doc":null,"default_value":"","external_name":"fibers","restriction":"Int32"},{"name":"dst_vch","doc":null,"default_value":"","external_name":"dst_vch","restriction":"Channel(T)"},{"name":"dst_ech","doc":null,"default_value":"nil","external_name":"dst_ech","restriction":"Channel(Exception) | ::Nil"}],"args_string":"(*, fibers : Int32, dst_vch : Channel(T), dst_ech : Channel(Exception)? = <span class=\"n\">nil</span>)","args_html":"(*, fibers : Int32, dst_vch : <a href=\"../../Channel.html\">Channel</a>(T), dst_ech : <a href=\"../../Channel.html\">Channel</a>(Exception)? = <span class=\"n\">nil</span>)","location":{"filename":"src/concurrent/stream.cr","line_number":227,"url":"https://github.com/didactic-drunk/concurrent.cr/blob/1d0aea042131f60f55db3df4ef57b10bc82d0e5c/src/concurrent/stream.cr#L227"},"def":{"name":"new","args":[{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"fibers","doc":null,"default_value":"","external_name":"fibers","restriction":"Int32"},{"name":"dst_vch","doc":null,"default_value":"","external_name":"dst_vch","restriction":"Channel(T)"},{"name":"dst_ech","doc":null,"default_value":"nil","external_name":"dst_ech","restriction":"Channel(Exception) | ::Nil"}],"double_splat":null,"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = Source(T).allocate\n_.initialize(fibers: fibers, dst_vch: dst_vch, dst_ech: dst_ech)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[],"macros":[],"types":[]},{"html_id":"concurrent/Concurrent/Stream/Tee","path":"Concurrent/Stream/Tee.html","kind":"class","full_name":"Concurrent::Stream::Tee(S)","name":"Tee","abstract":false,"superclass":{"html_id":"concurrent/Concurrent/Stream/Base","kind":"class","full_name":"Concurrent::Stream::Base","name":"Base"},"ancestors":[{"html_id":"concurrent/Concurrent/Stream/Base","kind":"class","full_name":"Concurrent::Stream::Base","name":"Base"},{"html_id":"concurrent/Concurrent/Stream/Receive","kind":"module","full_name":"Concurrent::Stream::Receive","name":"Receive"},{"html_id":"concurrent/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"concurrent/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/concurrent/stream.cr","line_number":303,"url":"https://github.com/didactic-drunk/concurrent.cr/blob/1d0aea042131f60f55db3df4ef57b10bc82d0e5c/src/concurrent/stream.cr#L303"}],"repository_name":"concurrent","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"concurrent/Concurrent/Stream","kind":"module","full_name":"Concurrent::Stream","name":"Stream"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(src_vch:Channel(S),src_ech:Channel(Exception),*,fibers:Int32,&block:S->_)-class-method","html_id":"new(src_vch:Channel(S),src_ech:Channel(Exception),*,fibers:Int32,&block:S->_)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"src_vch","doc":null,"default_value":"","external_name":"src_vch","restriction":"Channel(S)"},{"name":"src_ech","doc":null,"default_value":"","external_name":"src_ech","restriction":"Channel(Exception)"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"fibers","doc":null,"default_value":"","external_name":"fibers","restriction":"Int32"}],"args_string":"(src_vch : Channel(S), src_ech : Channel(Exception), *, fibers : Int32, &block : S -> _)","args_html":"(src_vch : <a href=\"../../Channel.html\">Channel</a>(S), src_ech : <a href=\"../../Channel.html\">Channel</a>(Exception), *, fibers : Int32, &block : S -> _)","location":{"filename":"src/concurrent/stream.cr","line_number":304,"url":"https://github.com/didactic-drunk/concurrent.cr/blob/1d0aea042131f60f55db3df4ef57b10bc82d0e5c/src/concurrent/stream.cr#L304"},"def":{"name":"new","args":[{"name":"src_vch","doc":null,"default_value":"","external_name":"src_vch","restriction":"Channel(S)"},{"name":"src_ech","doc":null,"default_value":"","external_name":"src_ech","restriction":"Channel(Exception)"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"fibers","doc":null,"default_value":"","external_name":"fibers","restriction":"Int32"}],"double_splat":null,"splat_index":2,"yields":1,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(S -> _)"},"return_type":"","visibility":"Public","body":"_ = Tee(S).allocate\n_.initialize(src_vch, src_ech, fibers: fibers, &block) do |_arg0|\n  yield _arg0\nend\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[],"macros":[],"types":[]}]},{"html_id":"concurrent/Concurrent/Wait","path":"Concurrent/Wait.html","kind":"struct","full_name":"Concurrent::Wait","name":"Wait","abstract":false,"superclass":{"html_id":"concurrent/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"concurrent/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"concurrent/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"concurrent/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/concurrent/wait.cr","line_number":2,"url":"https://github.com/didactic-drunk/concurrent.cr/blob/1d0aea042131f60f55db3df4ef57b10bc82d0e5c/src/concurrent/wait.cr#L2"}],"repository_name":"concurrent","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"concurrent/Concurrent","kind":"module","full_name":"Concurrent","name":"Concurrent"},"doc":"Lower resource version of CountDownLatch.  SWMR.","summary":"<p>Lower resource version of CountDownLatch.</p>","class_methods":[],"constructors":[{"id":"new-class-method","html_id":"new-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/concurrent/wait.cr","line_number":6,"url":"https://github.com/didactic-drunk/concurrent.cr/blob/1d0aea042131f60f55db3df4ef57b10bc82d0e5c/src/concurrent/wait.cr#L6"},"def":{"name":"new","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"done-instance-method","html_id":"done-instance-method","name":"done","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/concurrent/wait.cr","line_number":13,"url":"https://github.com/didactic-drunk/concurrent.cr/blob/1d0aea042131f60f55db3df4ef57b10bc82d0e5c/src/concurrent/wait.cr#L13"},"def":{"name":"done","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@ch.close"}},{"id":"wait-instance-method","html_id":"wait-instance-method","name":"wait","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/concurrent/wait.cr","line_number":9,"url":"https://github.com/didactic-drunk/concurrent.cr/blob/1d0aea042131f60f55db3df4ef57b10bc82d0e5c/src/concurrent/wait.cr#L9"},"def":{"name":"wait","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@ch.receive?"}}],"macros":[],"types":[]}]},{"html_id":"concurrent/Enumerable","path":"Enumerable.html","kind":"module","full_name":"Enumerable(T)","name":"Enumerable","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/concurrent/enumerable.cr","line_number":3,"url":"https://github.com/didactic-drunk/concurrent.cr/blob/1d0aea042131f60f55db3df4ef57b10bc82d0e5c/src/concurrent/enumerable.cr#L3"}],"repository_name":"concurrent","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[{"html_id":"concurrent/Concurrent/Stream/Serial","kind":"class","full_name":"Concurrent::Stream::Serial(T)","name":"Serial"}],"namespace":null,"doc":"The `Enumerable` mixin provides collection classes with several traversal, searching,\nfiltering and querying methods.\n\nIncluding types must provide an `each` method, which yields successive members\nof the collection.\n\nFor example:\n\n```\nclass Three\n  include Enumerable(Int32)\n\n  def each\n    yield 1\n    yield 2\n    yield 3\n  end\nend\n\nthree = Three.new\nthree.to_a                # => [1, 2, 3]\nthree.select &.odd?       # => [1, 3]\nthree.all? { |x| x < 10 } # => true\n```\n\nNote that most search and filter methods traverse an Enumerable eagerly,\nproducing an `Array` as the result. For a lazy alternative refer to\nthe `Iterator` and `Iterable` modules.","summary":"<p>The <code><a href=\"Enumerable.html\">Enumerable</a></code> mixin provides collection classes with several traversal, searching, filtering and querying methods.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"parallel(*,fibers:Int32=System.cpu_count.to_i)-instance-method","html_id":"parallel(*,fibers:Int32=System.cpu_count.to_i)-instance-method","name":"parallel","doc":"TODO: better error handling\n*\nSee `Concurrent::Stream`","summary":"<p><span class=\"flag orange\">TODO</span>  better error handling * See <code><a href=\"Concurrent/Stream.html\">Concurrent::Stream</a></code></p>\n\n<p><span class=\"flag lime\">EXPERIMENTAL</span>  </p>\n\n","abstract":false,"args":[{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"fibers","doc":null,"default_value":"System.cpu_count.to_i","external_name":"fibers","restriction":"Int32"}],"args_string":"(*, fibers : Int32 = <span class=\"t\">System</span>.cpu_count.to_i)","args_html":"(*, fibers : Int32 = <span class=\"t\">System</span>.cpu_count.to_i)","location":{"filename":"src/concurrent/enumerable.cr","line_number":8,"url":"https://github.com/didactic-drunk/concurrent.cr/blob/1d0aea042131f60f55db3df4ef57b10bc82d0e5c/src/concurrent/enumerable.cr#L8"},"def":{"name":"parallel","args":[{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"fibers","doc":null,"default_value":"System.cpu_count.to_i","external_name":"fibers","restriction":"Int32"}],"double_splat":null,"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"dst_vch = Channel(T).new\nConcurrent::Stream::Source(T).new(fibers: fibers, dst_vch: dst_vch).tap do |parallel|\n  spawn do\n    begin\n      self.each do |o|\n        dst_vch.send(o)\n      end\n    rescue ex\n      (parallel.@dst_ech).send(ex)\n    ensure\n      parallel.close\n    end\n  end\nend\n"}}],"macros":[],"types":[]}]}}